{"version":3,"sources":["server.js"],"names":["fs","require","BADWORDS","PROFANITY","CENZOR","readFile","err","contents","split","RegExp","join","console","log","WebSocket","PORT","server","Server","port","messages","clients","on","connection","socket","client","Date","now","id","send","JSON","stringify","incoming","message","code","substring","data","parse","text","profanity","length","shift","push","forEach","s","time","i","wordCounts","words","popular","w","toLowerCase","clientFound","answer","replace","m","substr"],"mappings":"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","file":"server.js","sourceRoot":"C:/work/chat-test","sourcesContent":["//Getting PROFANITY regex ready for use\r\nconst fs = require('fs');\r\nvar BADWORDS = [];\r\nvar PROFANITY;\r\nvar CENZOR;\r\nfs.readFile(\"assets/badwords.txt\", \"utf8\", function(err, contents) {\r\n    BADWORDS = contents.split('\\r\\n');\r\n    PROFANITY  = new RegExp( BADWORDS.join(\"|\") ,\"gi\");\r\n    CENZOR = (\"**********************\").split(\"\").join(\"******\");\r\n    console.log('Profanity words list loaded and filter set up');\r\n});\r\n\r\n//Setting up Websocket\r\nconst WebSocket = require('ws');\r\nconst PORT = 8080; \r\nconst server = new WebSocket.Server({ port: PORT });\r\n \r\nvar messages = []; \r\nvar clients = {};\r\n \r\nserver.on('connection', function connection(socket) {\r\n  //Handle new connections\r\n  console.log(\"Client connected\");\r\n  \r\n    var client = {};\r\n    client['name'] = \"Unknown\";\r\n    client['join'] = Date.now();\r\n    clients[socket.id] = client;    \r\n    \r\n \r\n  //sending chat history\r\n  socket.send(\"03\"+JSON.stringify(messages));\r\n   \r\n   \r\n  //Handle messages from clients  \r\n  socket.on('message', function incoming(message) {\r\n    //decoding message\r\n    var code =  message.substring(0, 2);\r\n    var data =  JSON.parse(message.substring(2));\r\n    console.log('received:{ code: '+code+' , message: '+ JSON.stringify(data) +' }');\r\n \r\n    //Code 01 - client settings\r\n    if(code == \"01\"){\r\n        if(data['name']){\r\n            clients[socket.id]['name'] = data['name']; \r\n        }\r\n        socket.send(\"01\"+JSON.stringify(clients[socket.id]));       \r\n    } \r\n    \r\n    //Code 02 - chat message\r\n    if(code == \"02\"){\r\n        var text = profanity(data['message']);\r\n        var message = { \"name\": clients[socket.id]['name'], \r\n                        \"message\": text, \r\n                        \"time\": Date.now()\r\n                        };          \r\n        \r\n        //keeping last 50 messages\r\n        if(messages.length >= 50){\r\n            messages.shift();   \r\n        }\r\n        messages.push(message); \r\n        \r\n        //sending message object to everyone\r\n        server.clients.forEach(function(client) {\r\n            client.send(\"02\"+JSON.stringify(message));\r\n        });      \r\n    }\r\n    \r\n    //Code 03 - /popular command \r\n    if(code == \"03\"){\r\n        var s = \"\";\r\n        var time = Date.now() - 5000;\r\n        for(var i = messages.length-1; i >= 0 && messages[i]['time'] >= time; i--){\r\n            s+= messages[i]['message'] + \" \";\r\n        }          \r\n        \r\n        var wordCounts = { };\r\n        var words = s.split(/\\b/);\r\n        \r\n        var popular = {};\r\n        popular['word'] = \"\"\r\n        popular['count'] = 0;\r\n        \r\n        for(var i = 0; i < words.length; i++){\r\n            var w = words[i].toLowerCase();\r\n            wordCounts[\"_\" + w] = (wordCounts[\"_\" + w] || 0) + 1;\r\n            if(wordCounts[\"_\" + w] > popular['count'] && w != \" \"){\r\n                popular['word'] = w;\r\n                popular['count'] = wordCounts[\"_\" + w];                \r\n            }\r\n        }\r\n\r\n        socket.send(\"04\"+JSON.stringify(popular));        \r\n    } \r\n\r\n    //Code 04 - /stats command \r\n    if(code == \"04\"){\r\n        //look for client\r\n        var clientFound;\r\n        for(var id in clients){\r\n            if(clients[id]['name'] == data['name']){\r\n                clientFound = clients[id];    \r\n            }\r\n        }\r\n        \r\n        if(clientFound){\r\n            //client found    \r\n            var answer = {};\r\n            answer['name'] = clientFound['name'];\r\n            answer['time'] = Date.now() - clientFound['join'];\r\n            socket.send(\"05\"+JSON.stringify(answer));               \r\n        }else{\r\n            //client not found\r\n            var answer = {};\r\n            answer['error'] = \"client not found\";\r\n            socket.send(\"05\"+JSON.stringify(answer));               \r\n        }           \r\n    } \r\n        \r\n  });\r\n\r\n  //Handle disconncetions from clients  \r\n  socket.on('close', function incoming(message) {\r\n    console.log('Client disconnected with code: %s', message);\r\n  });\r\n\r\n});\r\n\r\n//Server is fully set up\r\nconsole.log(\"Chat server is running at localhost:\"+PORT);\r\n\r\n\r\n//Helper functions\r\nconst profanity = function (message){\r\n    return message.replace(PROFANITY, function(m) { \r\n        return CENZOR.substr(0, m.length);\r\n    });\r\n}"]}